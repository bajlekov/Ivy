--  Copyright (C) 2011-2021 G. Bajlekov
--
--  Ivy is free software: you can redistribute it and/or modify
--  it under the terms of the GNU General Public License as published by
--  the Free Software Foundation, either version 3 of the License, or
--  (at your option) any later version.
--
--  Ivy is distributed in the hope that it will be useful,
--  but WITHOUT ANY WARRANTY; without even the implied warranty of
--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
--  GNU General Public License for more details.
--
--  You should have received a copy of the GNU General Public License
--  along with this program.  If not, see <http://www.gnu.org/licenses/>.

const SX = 7
const SY = 7
const eps = 0.000001

kernel init(T3, T4, W)
  const x = get_global_id(0)
  const y = get_global_id(1)

  T3[x, y] = vec(0.0)
  T4[x, y] = vec(0.0)
  W[x, y] = vec(eps)
end

kernel dist(I, T1, p5, ox, oy)
  const x = get_global_id(0)
  const y = get_global_id(1)

  --if (x+ox-SX)<0 or (x+ox+SX)>=I.x or (y+oy-SY)<0 or (y+oy+SY)>=I.y then
  --  T1[x, y] = 1000000000
  --  return
  --end

  var i1 = max(I[x, y], 0.0)
  var i2 = max(I[x+ox, y+oy], 0.0)

  -- photon well depth for proper scaling of the poisson noise
  var depth = 25000.0

  -- anscombe transform from poisson noise to unit standard deviation noise
  i1 = 2.0*sqrt(i1*depth + p5[0]*200.0^2 + eps)
  i2 = 2.0*sqrt(i2*depth + p5[0]*200.0^2 + eps)

  var o = abs(i1 - i2)^2
  T1[x, y] = (o.x + o.y + o.z) -- r/g/b weight?
end

kernel horizontal(T1, T2, k)
  const x = get_global_id(0)
  const y = get_global_id(1)

  var sum = 0.0
  for i = -SX, SX do
    sum = sum + T1[x+i, y]*k[i+7]
  end

  T2[x, y] = sum
end

kernel vertical(T1, T2, k)
  const x = get_global_id(0)
  const y = get_global_id(1)

  var sum = 0.0
  for i = -SY, SY do
    sum = sum + T1[x, y+i]*k[i+7]
  end

  T2[x, y] = sum
end

kernel accumulate(I, T1, T3, T4, W, p1, p2, ox, oy)
  const x = get_global_id(0)
  const y = get_global_id(1)

  var sigma = (1.0 - vec(p2[x, y], p1[x, y], p2[x, y]))^5

  var pf = exp(-T1[x, y]*sigma)
  var nf = exp(-T1[x-ox, y-oy]*sigma)

  if (x+ox)<0 or (x+ox)>=I.x or (y+oy)<0 or (y+oy)>=I.y then
    pf = 0
  end

  if (x-ox)<0 or (x-ox)>=I.x or (y-oy)<0 or (y-oy)>=I.y then
    nf = 0
  end

  var pi = I[x+ox, y+oy]
  pi.x = pi.x/max(pi.y, eps)
  pi.z = pi.z/max(pi.y, eps)
  var ni = I[x-ox, y-oy]
  ni.x = ni.x/max(ni.y, eps)
  ni.z = ni.z/max(ni.y, eps)

  var t3 = T3[x, y] + pi*pf + ni*nf
  var t4 = T4[x, y] + pf + nf
  T3[x, y] = t3
  T4[x, y] = t4

  var w = W[x, y]
  W[x, y] = max(w, max(pf, nf))
end

kernel norm(I, T3, T4, W, O, p3)
  const x = get_global_id(0)
  const y = get_global_id(1)

  var i = I[x, y]
  var j = i
  i.x = i.x/max(i.y, eps)
  i.z = i.z/max(i.y, eps)

  var w = W[x, y]
  var o = (w*i + T3[x, y]) / (w + T4[x, y])
  o.x = o.x*o.y
  o.z = o.z*o.y

  var f = p3[x, y, 0]
  o = j*(1-f) + o*f

  O[x, y] = o
end
